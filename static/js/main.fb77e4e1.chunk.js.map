{"version":3,"sources":["components/Formulario.js","components/Listado.js","components/ListadoPersonaje.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","guardarBusquedaCharacter","useState","rikymorty","busqueda","guardarBusqueda","error","guardarError","className","onSubmit","e","preventDefault","trim","name","onChange","target","value","type","Listado","personaje","image","species","status","gender","src","ListadoPersonaje","personajes","map","key","url","App","busquedaCharacter","guardarDatos","paginaactual","guardarPaginaActual","totalpaginas","guardarTotalpaginas","useEffect","Object","keys","length","console","log","a","imagesPortaPagina","fetch","resultado","json","results","calcularTotalPaginas","Math","ceil","count","consultarApiCharacter","onClick","nuevaPaginaActual","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.fb77e4e1.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\n\r\nconst Formulario = ({guardarBusquedaCharacter}) => {\r\n\r\n    const [busqueda, guardarBusqueda] = useState({\r\n        rikymorty: ''\r\n    });\r\n\r\n    const [ error, guardarError] = useState(false);\r\n    \r\n\r\n    const { rikymorty} = busqueda\r\n\r\n    //const {datos} = busqueda\r\n      // función a cada input para leer su contenido\r\n      const actualizarState = e => {\r\n        guardarBusqueda({\r\n            ...busqueda,\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n\r\n    // COnsultar Informacion las Apis\r\n\r\n    const buscarInformacion = e =>{\r\n        e.preventDefault();\r\n\r\n        if(rikymorty.trim() === ''){\r\n           guardarError(true);\r\n           return;\r\n        }\r\n         guardarError(false)\r\n        // Todo bian , pasar al componente principal\r\n        guardarBusquedaCharacter(busqueda);\r\n    }\r\n\r\n    return (\r\n        <div className=\"bg-info\">\r\n        {error ? <p className=\"alert alert-danger text-center p-2\">Selecioana algún dato</p> :null }\r\n         <div className=\"container\">\r\n          <div className=\"row\">\r\n      \r\n           <form\r\n             className=\"col card text-white bg-transparent mb-5 pt-5 pb-2\"\r\n             onSubmit ={buscarInformacion}\r\n           >\r\n            <fieldset>\r\n             <legend className=\"text-center\">Buscador de Rick and Morty</legend>\r\n             <div className=\"row\">\r\n             <div className=\"col-md-6\">\r\n                 <div className=\"form-group\">\r\n                     <label>rikymorty</label>\r\n                     \r\n\r\n                     <select className=\"form-control\" name=\"rikymorty\"  onChange={actualizarState}>\r\n                       <option>Selecionar</option>\r\n                       <option >character</option>\r\n                       <option>location</option>\r\n                       <option>episode</option>\r\n                     </select>\r\n                 </div>\r\n                 \r\n             </div>\r\n         </div>\r\n             <button type=\"submit\" className=\"btn-primary float-right\">Buscar</button>\r\n            </fieldset>\r\n           </form>\r\n          </div>\r\n         </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Formulario","import React from 'react'\r\n\r\nconst Listado = ({personaje}) =>{\r\n    //extraer los datos\r\n    const{image,name,species,status,type,gender} =personaje;\r\n    return (\r\n        <div className =\"container\">\r\n          <div className=\"row row-cols-1 row-cols-sm-5 row-cols-md-4\">\r\n               <div className=\"col\">\r\n                    <div className=\"card\">\r\n                        <img src={image}/>\r\n                           <div className=\"card-content\">\r\n                            <h3>Nombre: {name}</h3>\r\n                            <h5>Especie:{species}</h5>\r\n                            <h5>status:{status}</h5>\r\n                            <h5>gender:{gender}</h5>\r\n                            <h5>Type:{type}</h5>\r\n                           </div>\r\n                    </div>\r\n               </div>\r\n          </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Listado;","import React from 'react'\r\nimport Listado from './Listado';\r\n\r\nconst ListadoPersonaje =({personajes}) =>(\r\n    <div className=\"row\">\r\n       {personajes.map(personaje =>(\r\n           <Listado \r\n              key={personaje.url}\r\n              personaje={personaje}\r\n            />\r\n\r\n       ))}\r\n    </div>\r\n);\r\n\r\nexport default ListadoPersonaje;","import React,{Fragment,useState, useEffect} from 'react';\nimport Formulario from './components/Formulario';\nimport ListadoPersonaje from './components/ListadoPersonaje';\n\n\n\nfunction App() {\n\n  // definir el state\n\n  const[busquedaCharacter,guardarBusquedaCharacter] = useState({})     \n  const[personajes,guardarDatos] = useState([]);\n  const [paginaactual,guardarPaginaActual] = useState(1);\nconst [totalpaginas,guardarTotalpaginas] = useState(5);\n\n  useEffect(() =>{\n    if(Object.keys(busquedaCharacter).length === 0) return;\n    console.log('No se ejecuta');\n\n    const consultarApiCharacter = async() =>{\n      const imagesPortaPagina = 2;\n      const {rikymorty} = busquedaCharacter\n  const url = `https://rickandmortyapi.com/api/${rikymorty}?page=${paginaactual}`\n      //const url = `https://rickandmortyapi.com/api/${rikymorty}/`\n    \n       const resultado = await fetch(url);\n       const personajes = await resultado.json();\n\n       //console.log(names.results);\n       \n      \n      guardarDatos(personajes.results);\n    \n      //console.log(personajes);\n      //calcular la cantidad de páginas\n\n      const calcularTotalPaginas = Math.ceil(personajes.count / imagesPortaPagina)\n     guardarTotalpaginas(calcularTotalPaginas);\n\n     //Mover la pantalla hacia arriba\n\n    }\n    consultarApiCharacter();\n    \n  },[busquedaCharacter,paginaactual]);\n\n// definir lapagina anterior\nconst paginaAnterior = () =>{\n  const nuevaPaginaActual = paginaactual - 1;\n\n  if(nuevaPaginaActual === -1) return;\n\n  guardarPaginaActual(nuevaPaginaActual);\n  \n}\n// definir la pagina siguiente\nconst paginaSiguiente = () =>{\n  const nuevaPaginaActual = paginaactual + 1;\n\n  if(nuevaPaginaActual > totalpaginas) return;\n\n \n  guardarPaginaActual(nuevaPaginaActual);\n  \n}\n\n  return (\n    <div >\n     <Fragment>\n     <div className=\"jumbotron\">\n         <Formulario guardarBusquedaCharacter ={guardarBusquedaCharacter}/>\n     </div>\n       <div className=\"row justify-content-center\">\n          <ListadoPersonaje personajes={personajes} />\n        {(paginaactual ===1) ? null : (\n          <button type=\"button\" className=\"btn btn-info \" onClick={paginaAnterior}>&laquo;Anterior </button>\n        )}\n        {(paginaactual === totalpaginas ) ? null : (\n          <button type=\"button\" className=\"btn btn-info \" onClick={paginaSiguiente}>Siguiente &raquo;</button>\n        )}\n\n         \n       </div>\n     </Fragment>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}